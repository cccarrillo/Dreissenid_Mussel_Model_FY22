#setwd("C:/Users/RDEL1CMC/Desktop/JA/Second_Revision/Results_08232022")
#instead of file path, Iris used here() fun to set wd
init_infect_dat <- read_xlsx(here("initial_infected.xlsx"))
init_dat <- read_xlsx(here("initial_uninfected.xlsm"))
dat <- read_xlsx(here("HSI_No_Buff_Survive_100.xlsx"), sheet="Lake_Results_0")
# subset by only infections (i.e. Infections = True; column Infected. == T)
# The "," in the brackets after "T" means to select all rows
infect_dat <- dat[dat$Infected==TRUE,]
#init_dat is the initial infected data file that also has the uninfected lakes
# Note, there are probably a lot of ways to do this part
# Sort data in ascending order by Iteration and Lake, so all lakes infected at
# time step 0 are listed in alphabetical order
infect_dat_sort <- infect_dat[with(infect_dat, order(Iteration, Lake)),]
#sort initial infected data by iteration and lake
# Select the time step when lake is first infected
# the "!" means not, so this is selecting the rows where where the Lake name is
# not duplicated (i.e. the first time it occurs in the data frame)
infect_dat_first <- infect_dat_sort[!duplicated(infect_dat_sort$Lake),]
infect_dat_first$newtimestep <- infect_dat_first$Iteration+1
init_dat$newtimestep <- init_dat$Iteration
#NOTE. Iris did not use this code at all...just double checking I used the right data!
# save dataset as Excel file -- the row.names=F argument means not to include
# column in Excel sheet with index value
write_xlsx(infect_dat_first, "First_Infection_HSI_No_Buff_Survive_100.xlsx")
#combine the excel files into one file to plot
#Iris added a HSI column so they would bind
combined <- rbind(init_dat %>% mutate(HSI = NA), infect_dat_first)
combined
combined_sort <- combined[with(combined, order(Lake, Iteration)),]
combined_sort
combined_sort$Lake[combined_sort$Infected==T & combined_sort$Iteration==0]
#pulling out initially infected lakes based on FID
combined_sort__not_initially_infected <-combined_sort[combined_sort$FID %in% c(53, 87, 90, 138, 180, 213, 216, 217, 220, 221, 317),]
combined_sort__not_initially_infected
combined_sort$newtimestep[combined_sort$FID %in% c(53, 87, 90, 138, 180, 213, 216, 217, 220, 221, 317)] = 0
combined_sort
# Convert to spatial points data frame and project in WGS84 (i.e. Degrees)
# The CRS stands for coordinate reference system and I googled the code to put in (4326)
coordinates(combined_sort) <- ~Longitude+Latitude
proj4string(combined_sort) <- CRS("+init=epsg:4326")
coordinates(infect_dat_first) <- ~Longitude+Latitude
proj4string(infect_dat_first) <- CRS("+init=epsg:4326")
coordinates(init_infect_dat) <- ~Longitude+Latitude
proj4string(init_infect_dat) <- CRS("+init=epsg:4326")
coordinates(init_dat) <- ~Longitude+Latitude
proj4string(init_dat) <- CRS("+init=epsg:4326")
# Save Spatial Points data frame as shapefile
# Note, this abbreviates the field names
writeOGR(combined_sort, "infect_dat_first_HSI_No_Buff_Survive_100.shp", layer="infect_dat_first", driver="ESRI Shapefile")
#IRIS'S ATTEMPT WITH SF PACKAGE
library(sf) #for spatial data
library(scales) #for color scales
#Read this in as sf object
USmaps_sf <- read_sf(here("US_STATES.shp"))
#Convert these to sp objects to sf
infected_dat_first_sf <- st_as_sf(infect_dat_first)
init_infect_dat_sf <- st_as_sf(init_infect_dat)
#Remove lakes from infected_dat_first if they are initially infected
infected_dat_first_sf <- infected_dat_first_sf %>%
filter(!Lake %in% c(init_infect_dat_sf$Lake))
#rbind initially infected with infected first, create factor version of newtimestep
infect_timestep <- rbind(init_infect_dat_sf %>% mutate(HSI = NA), infected_dat_first_sf) %>%
mutate(time_to_infect = as.character(newtimestep)) %>%
#if timestep is 0, lake is initially infected, if it is 6, it is never infected
mutate(time_to_infect = case_when(time_to_infect == 0 ~ "Initially Infected",
time_to_infect == 6 ~ "Never Infected",
T ~ time_to_infect))
#order factor levels
infect_timestep$time_to_infect <- factor(infect_timestep$time_to_infect, levels = c("Initially Infected", "1", "2", "3", "4", "5", "Never Infected"), ordered = T)
#check factor levels
levels(infect_timestep$time_to_infect)
#set up colors (and color names for legend)
timestep_colors <- c("red", hue_pal(h = c(90, 180))(5),"black")
names(timestep_colors) <-  c("Initially Infected", "1", "2", "3", "4", "5", "Never Infected")
#ggplot
ggplot() +
#plot the us map data
geom_sf(data = USmaps_sf) +
#then add the infected lake data
geom_sf(data = infect_timestep, aes(color = time_to_infect)) +
#use timestep colors
scale_color_manual(values = timestep_colors) +
#title of legend
labs(color = "Time to Infection") +
#use theme_void so we dont have grid lines
theme_void() +
#plot title
labs(title = "HSI_No_Buff_Survive_100") +
#set title size and legend position
theme(plot.title = element_text(hjust = 0.5),
legend.position = "left")
#This line will save the last ggplot rendered (so the plot above will be saved)
#ggsave2(here("Infect_Plot_Null_No_Buff_Survive_100.png"))
knitr::opts_chunk$set(echo = TRUE)
#install.packages("unikn")
library(tidyverse) # library to read excel files
library(readxl)
library(writexl)
library(ggplot2)
library(here) #this automatically sets working directory to location of file
#library(cowplot)
#library(unikn)
#library(patchwork)
#library(rgdal) # library for GIS functions
#library(sp) # library for GIS functions (dependency for rgdal)
# read in excel file, arguments are file name and sheet name
#setwd("C:/Users/RDEL1CMC/Desktop/JA/Second_Revision/Results_08232022")
#instead of file path, Iris used here() fun to set wd
init_infect_dat <- read_xlsx(here("initial_infected.xlsx"))
init_dat <- read_xlsx(here("initial_uninfected.xlsm"))
dat <- read_xlsx(here("HSI_Buff_100.xlsx"), sheet="Lake_Results_0")
# subset by only infections (i.e. Infections = True; column Infected. == T)
# The "," in the brackets after "T" means to select all rows
infect_dat <- dat[dat$Infected==TRUE,]
#init_dat is the initial infected data file that also has the uninfected lakes
# Note, there are probably a lot of ways to do this part
# Sort data in ascending order by Iteration and Lake, so all lakes infected at
# time step 0 are listed in alphabetical order
infect_dat_sort <- infect_dat[with(infect_dat, order(Iteration, Lake)),]
#sort initial infected data by iteration and lake
# Select the time step when lake is first infected
# the "!" means not, so this is selecting the rows where where the Lake name is
# not duplicated (i.e. the first time it occurs in the data frame)
infect_dat_first <- infect_dat_sort[!duplicated(infect_dat_sort$Lake),]
infect_dat_first$newtimestep <- infect_dat_first$Iteration+1
init_dat$newtimestep <- init_dat$Iteration
#NOTE. Iris did not use this code at all...just double checking I used the right data!
# save dataset as Excel file -- the row.names=F argument means not to include
# column in Excel sheet with index value
write_xlsx(infect_dat_first, "First_Infection_HSI_Buff_100.xlsx")
#combine the excel files into one file to plot
#Iris added a HSI column so they would bind
combined <- rbind(init_dat %>% mutate(HSI = NA), infect_dat_first)
combined
combined_sort <- combined[with(combined, order(Lake, Iteration)),]
combined_sort
combined_sort$Lake[combined_sort$Infected==T & combined_sort$Iteration==0]
#pulling out initially infected lakes based on FID
combined_sort__not_initially_infected <-combined_sort[combined_sort$FID %in% c(53, 87, 90, 138, 180, 213, 216, 217, 220, 221, 317),]
combined_sort__not_initially_infected
combined_sort$newtimestep[combined_sort$FID %in% c(53, 87, 90, 138, 180, 213, 216, 217, 220, 221, 317)] = 0
combined_sort
# Convert to spatial points data frame and project in WGS84 (i.e. Degrees)
# The CRS stands for coordinate reference system and I googled the code to put in (4326)
coordinates(combined_sort) <- ~Longitude+Latitude
proj4string(combined_sort) <- CRS("+init=epsg:4326")
coordinates(infect_dat_first) <- ~Longitude+Latitude
proj4string(infect_dat_first) <- CRS("+init=epsg:4326")
coordinates(init_infect_dat) <- ~Longitude+Latitude
proj4string(init_infect_dat) <- CRS("+init=epsg:4326")
coordinates(init_dat) <- ~Longitude+Latitude
proj4string(init_dat) <- CRS("+init=epsg:4326")
# Save Spatial Points data frame as shapefile
# Note, this abbreviates the field names
writeOGR(combined_sort, "infect_dat_first_HSI_Buff_100.shp", layer="infect_dat_first", driver="ESRI Shapefile")
knitr::opts_chunk$set(echo = TRUE)
#install.packages("unikn")
library(tidyverse) # library to read excel files
library(readxl)
library(writexl)
library(ggplot2)
library(here) #this automatically sets working directory to location of file
#library(cowplot)
#library(unikn)
#library(patchwork)
#library(rgdal) # library for GIS functions
#library(sp) # library for GIS functions (dependency for rgdal)
dat <- read_xlsx(here("HSI_Buff_100.xlsx"), sheet="Lake_Results_0")
# read in excel file, arguments are file name and sheet name
#setwd("C:/Users/RDEL1CMC/Desktop/JA/Second_Revision/Results_08232022")
#instead of file path, Iris used here() fun to set wd
init_infect_dat <- read_xlsx(here("initial_infected.xlsx"))
init_dat <- read_xlsx(here("initial_uninfected.xlsm"))
dat <- read_xlsx(here("HSI_Buff_100.xlsx"), sheet="Lake_Results_0")
# subset by only infections (i.e. Infections = True; column Infected. == T)
# The "," in the brackets after "T" means to select all rows
infect_dat <- dat[dat$Infected==TRUE,]
#init_dat is the initial infected data file that also has the uninfected lakes
# Note, there are probably a lot of ways to do this part
# Sort data in ascending order by Iteration and Lake, so all lakes infected at
# time step 0 are listed in alphabetical order
infect_dat_sort <- infect_dat[with(infect_dat, order(Iteration, Lake)),]
#sort initial infected data by iteration and lake
# Select the time step when lake is first infected
# the "!" means not, so this is selecting the rows where where the Lake name is
# not duplicated (i.e. the first time it occurs in the data frame)
infect_dat_first <- infect_dat_sort[!duplicated(infect_dat_sort$Lake),]
infect_dat_first$newtimestep <- infect_dat_first$Iteration+1
init_dat$newtimestep <- init_dat$Iteration
#NOTE. Iris did not use this code at all...just double checking I used the right data!
# save dataset as Excel file -- the row.names=F argument means not to include
# column in Excel sheet with index value
write_xlsx(infect_dat_first, "First_Infection_HSI_Buff_100.xlsx")
#combine the excel files into one file to plot
#Iris added a HSI column so they would bind
combined <- rbind(init_dat %>% mutate(HSI = NA), infect_dat_first)
combined
combined_sort <- combined[with(combined, order(Lake, Iteration)),]
combined_sort
combined_sort$Lake[combined_sort$Infected==T & combined_sort$Iteration==0]
#pulling out initially infected lakes based on FID
combined_sort__not_initially_infected <-combined_sort[combined_sort$FID %in% c(53, 87, 90, 138, 180, 213, 216, 217, 220, 221, 317),]
combined_sort__not_initially_infected
combined_sort$newtimestep[combined_sort$FID %in% c(53, 87, 90, 138, 180, 213, 216, 217, 220, 221, 317)] = 0
combined_sort
# Convert to spatial points data frame and project in WGS84 (i.e. Degrees)
# The CRS stands for coordinate reference system and I googled the code to put in (4326)
coordinates(combined_sort) <- ~Longitude+Latitude
proj4string(combined_sort) <- CRS("+init=epsg:4326")
coordinates(infect_dat_first) <- ~Longitude+Latitude
proj4string(infect_dat_first) <- CRS("+init=epsg:4326")
coordinates(init_infect_dat) <- ~Longitude+Latitude
proj4string(init_infect_dat) <- CRS("+init=epsg:4326")
coordinates(init_dat) <- ~Longitude+Latitude
proj4string(init_dat) <- CRS("+init=epsg:4326")
# Save Spatial Points data frame as shapefile
# Note, this abbreviates the field names
writeOGR(combined_sort, "infect_dat_first_HSI_Buff_100.shp", layer="infect_dat_first", driver="ESRI Shapefile")
library(ggplot2)
library(readxl)
library(tidyr) # This library is necessary for converting the dataframe from long to wide format (pivot_wider function)
#setwd("C:/Users/RDEL1CMC/Desktop/Congressional_Ad_Projects/Dreissenid_Mussel_Model/Results") # set to your working directory
dat <- read_excel("Test_Sensitivity_Results.xlsx")
library(ggplot2)
library(readxl)
library(tidyr) # This library is necessary for converting the dataframe from long to wide format (pivot_wider function)
setwd("C:/Users/RDEL1CMC/Desktop/Congressional_Ad_Projects/Dreissenid_Mussel_Model/Results/") # set to your working directory
dat <- read_excel("Test_Sensitivity_Results.xlsx")
dat <- dat[c(1,3:4)] # I dropped the "parameter" variable -- necessary to use pivot_wider
dat$RunNumber <- paste("Run",dat$RunNumber, sep="") # Converting from number type to string
# pivot_wider makes a column for each RunNumber
# This way you can select min/max for the geom_ribbon function
dat %>%
ggplot(aes(x = TimeStep)) +
#ylim(0,325) +
scale_x_continuous(limits = c(1,7), expand = c(0,0)) +
scale_y_continuous(limits = c(0,200), expand = c(0,0), breaks = seq(0, 200, 50)) +
geom_ribbon(
data = ~ pivot_wider(., names_from = RunNumber, values_from = infested),
aes(ymin = Run11, ymax = Run15), fill = "blue", alpha = 0.25
) +
geom_line(aes(y = infested,
linetype=RunNumber), # added line type back inside "aes"
color= "black", # added color outside "aes" so all would be black
lwd  = 0.5, )  +
scale_linetype_manual(name = "", values = c("dashed", "solid", "dotted")) +
ylab("Number of lakes infested") + xlab("Timestep") +
theme_bw() +
theme(legend.position = "none") +# this takes out the legend
theme(axis.text=element_text(size=12), axis.title=element_text(size=14))+ # Changes the font size of axes labels
theme(panel.grid.minor = element_blank()) # takes out the minor grid lines -- I did this because you don't have 0.5 timesteps
ggsave("Boat_Threshold.jpg", height=10, width=8)
library(ggplot2)
library(readxl)
library(tidyr) # This library is necessary for converting the dataframe from long to wide format (pivot_wider function)
setwd("C:/Users/RDEL1CMC/Desktop/Congressional_Ad_Projects/Dreissenid_Mussel_Model/Results/") # set to your working directory
dat <- read_excel("Test_Sensitivity_Results.xlsx")
dat <- dat[c(1,3:4)] # I dropped the "parameter" variable -- necessary to use pivot_wider
dat$RunNumber <- paste("Run",dat$RunNumber, sep="") # Converting from number type to string
# pivot_wider makes a column for each RunNumber
# This way you can select min/max for the geom_ribbon function
dat %>%
ggplot(aes(x = TimeStep)) +
#ylim(0,325) +
scale_x_continuous(limits = c(1,7), expand = c(0,0)) +
scale_y_continuous(limits = c(0,350), expand = c(0,0), breaks = seq(0, 350, 50)) +
geom_ribbon(
data = ~ pivot_wider(., names_from = RunNumber, values_from = infested),
aes(ymin = Run11, ymax = Run15), fill = "blue", alpha = 0.25
) +
geom_line(aes(y = infested,
linetype=RunNumber), # added line type back inside "aes"
color= "black", # added color outside "aes" so all would be black
lwd  = 0.5, )  +
scale_linetype_manual(name = "", values = c("dashed", "solid", "dotted")) +
ylab("Number of lakes infested") + xlab("Timestep") +
theme_bw() +
theme(legend.position = "none") +# this takes out the legend
theme(axis.text=element_text(size=12), axis.title=element_text(size=14))+ # Changes the font size of axes labels
theme(panel.grid.minor = element_blank()) # takes out the minor grid lines -- I did this because you don't have 0.5 timesteps
ggsave("Boat_Threshold.jpg", height=10, width=8)
library(ggplot2)
library(readxl)
library(tidyr) # This library is necessary for converting the dataframe from long to wide format (pivot_wider function)
setwd("C:/Users/RDEL1CMC/Desktop/Congressional_Ad_Projects/Dreissenid_Mussel_Model/Results/") # set to your working directory
dat <- read_excel("Test_Sensitivity_Results.xlsx")
dat <- dat[c(1,3:4)] # I dropped the "parameter" variable -- necessary to use pivot_wider
dat$RunNumber <- paste("Run",dat$RunNumber, sep="") # Converting from number type to string
# pivot_wider makes a column for each RunNumber
# This way you can select min/max for the geom_ribbon function
dat %>%
ggplot(aes(x = TimeStep)) +
#ylim(0,325) +
scale_x_continuous(limits = c(1,7), expand = c(0,0)) +
scale_y_continuous(limits = c(0,350), expand = c(0,0), breaks = seq(0, 350, 50)) +
geom_ribbon(
data = ~ pivot_wider(., names_from = RunNumber, values_from = infested),
aes(ymin = Run11, ymax = Run15), fill = "blue", alpha = 0.25
) +
geom_line(aes(y = infested,
linetype=RunNumber), # added line type back inside "aes"
color= "black", # added color outside "aes" so all would be black
lwd  = 0.5, )  +
scale_linetype_manual(name = "", values = c("dashed", "solid", "dotted")) +
ylab("Number of lakes infested") + xlab("Timestep") +
theme_bw() +
theme(legend.position = "none") +# this takes out the legend
theme(axis.text=element_text(size=12), axis.title=element_text(size=14))+ # Changes the font size of axes labels
theme(panel.grid.minor = element_blank()) # takes out the minor grid lines -- I did this because you don't have 0.5 timesteps
ggsave("Buffer_Zone.jpg", height=10, width=8)
library(ggplot2)
library(readxl)
library(tidyr) # This library is necessary for converting the dataframe from long to wide format (pivot_wider function)
setwd("C:/Users/RDEL1CMC/Desktop/Congressional_Ad_Projects/Dreissenid_Mussel_Model/Results/") # set to your working directory
dat <- read_excel("Test_Sensitivity_Results.xlsx")
dat <- dat[c(1,3:4)] # I dropped the "parameter" variable -- necessary to use pivot_wider
dat$RunNumber <- paste("Run",dat$RunNumber, sep="") # Converting from number type to string
# pivot_wider makes a column for each RunNumber
# This way you can select min/max for the geom_ribbon function
dat %>%
ggplot(aes(x = TimeStep)) +
#ylim(0,325) +
scale_x_continuous(limits = c(1,7), expand = c(0,0)) +
scale_y_continuous(limits = c(0,350), expand = c(0,0), breaks = seq(0, 350, 50)) +
geom_ribbon(
data = ~ pivot_wider(., names_from = RunNumber, values_from = infested),
aes(ymin = Run11, ymax = Run15), fill = "blue", alpha = 0.25
) +
geom_line(aes(y = infested,
linetype=RunNumber), # added line type back inside "aes"
color= "black", # added color outside "aes" so all would be black
lwd  = 0.5, )  +
scale_linetype_manual(name = "", values = c("dashed", "solid", "dotted")) +
ylab("Number of lakes infested") + xlab("Timestep") +
theme_bw() +
theme(legend.position = "none") +# this takes out the legend
theme(axis.text=element_text(size=12), axis.title=element_text(size=14))+ # Changes the font size of axes labels
theme(panel.grid.minor = element_blank()) # takes out the minor grid lines -- I did this because you don't have 0.5 timesteps
ggsave("Buffer_Zone_11212022.jpg", height=10, width=8)
library(ggplot2)
library(readxl)
library(tidyr) # This library is necessary for converting the dataframe from long to wide format (pivot_wider function)
setwd("C:/Users/RDEL1CMC/Desktop/Congressional_Ad_Projects/Dreissenid_Mussel_Model/Results/") # set to your working directory
dat <- read_excel("Test_Sensitivity_Results.xlsx")
dat <- dat[c(1,3:4)] # I dropped the "parameter" variable -- necessary to use pivot_wider
dat$RunNumber <- paste("Run",dat$RunNumber, sep="") # Converting from number type to string
# pivot_wider makes a column for each RunNumber
# This way you can select min/max for the geom_ribbon function
dat %>%
ggplot(aes(x = TimeStep)) +
#ylim(0,325) +
scale_x_continuous(limits = c(1,7), expand = c(0,0)) +
scale_y_continuous(limits = c(0,350), expand = c(0,0), breaks = seq(0, 350, 50)) +
geom_ribbon(
data = ~ pivot_wider(., names_from = RunNumber, values_from = infested),
aes(ymin = Run11, ymax = Run15), fill = "blue", alpha = 0.25
) +
geom_line(aes(y = infested,
linetype=RunNumber), # added line type back inside "aes"
color= "black", # added color outside "aes" so all would be black
lwd  = 0.5, )  +
scale_linetype_manual(name = "", values = c("dashed", "solid", "dotted")) +
ylab("Number of lakes infested") + xlab("Timestep") +
theme_bw() +
theme(legend.position = "none") +# this takes out the legend
theme(axis.text=element_text(size=12), axis.title=element_text(size=14))+ # Changes the font size of axes labels
theme(panel.grid.minor = element_blank()) # takes out the minor grid lines -- I did this because you don't have 0.5 timesteps
library(ggplot2)
library(readxl)
library(tidyr) # This library is necessary for converting the dataframe from long to wide format (pivot_wider function)
setwd("C:/Users/RDEL1CMC/Desktop/Congressional_Ad_Projects/Dreissenid_Mussel_Model/Results/") # set to your working directory
dat <- read_excel("Test_Sensitivity_Results.xlsx")
dat <- dat[c(1,3:4)] # I dropped the "parameter" variable -- necessary to use pivot_wider
dat$RunNumber <- paste("Run",dat$RunNumber, sep="") # Converting from number type to string
# pivot_wider makes a column for each RunNumber
# This way you can select min/max for the geom_ribbon function
dat %>%
ggplot(aes(x = TimeStep)) +
#ylim(0,325) +
scale_x_continuous(limits = c(1,7), expand = c(0,0)) +
scale_y_continuous(limits = c(0,350), expand = c(0,0), breaks = seq(0, 350, 50)) +
geom_ribbon(
data = ~ pivot_wider(., names_from = RunNumber, values_from = infested),
aes(ymin = Run5, ymax = Run1), fill = "blue", alpha = 0.25
) +
geom_line(aes(y = infested,
linetype=RunNumber), # added line type back inside "aes"
color= "black", # added color outside "aes" so all would be black
lwd  = 0.5, )  +
scale_linetype_manual(name = "", values = c("dashed", "solid", "dotted")) +
ylab("Number of lakes infested") + xlab("Timestep") +
theme_bw() +
theme(legend.position = "none") +# this takes out the legend
theme(axis.text=element_text(size=12), axis.title=element_text(size=14))+ # Changes the font size of axes labels
theme(panel.grid.minor = element_blank()) # takes out the minor grid lines -- I did this because you don't have 0.5 timesteps
ggsave("Boater_Threshold_11212022.jpg", height=10, width=8)
library(ggplot2)
library(readxl)
library(tidyr) # This library is necessary for converting the dataframe from long to wide format (pivot_wider function)
setwd("C:/Users/RDEL1CMC/Desktop/Congressional_Ad_Projects/Dreissenid_Mussel_Model/Results/") # set to your working directory
dat <- read_excel("Test_Sensitivity_Results.xlsx")
dat <- dat[c(1,3:4)] # I dropped the "parameter" variable -- necessary to use pivot_wider
dat$RunNumber <- paste("Run",dat$RunNumber, sep="") # Converting from number type to string
# pivot_wider makes a column for each RunNumber
# This way you can select min/max for the geom_ribbon function
dat %>%
ggplot(aes(x = TimeStep)) +
#ylim(0,325) +
scale_x_continuous(limits = c(1,7), expand = c(0,0)) +
scale_y_continuous(limits = c(0,350), expand = c(0,0), breaks = seq(0, 350, 50)) +
geom_ribbon(
data = ~ pivot_wider(., names_from = RunNumber, values_from = infested),
aes(ymin = Run6, ymax = Run10), fill = "blue", alpha = 0.25
) +
geom_line(aes(y = infested,
linetype=RunNumber), # added line type back inside "aes"
color= "black", # added color outside "aes" so all would be black
lwd  = 0.5, )  +
scale_linetype_manual(name = "", values = c("dashed", "solid", "dotted")) +
ylab("Number of lakes infested") + xlab("Timestep") +
theme_bw() +
theme(legend.position = "none") +# this takes out the legend
theme(axis.text=element_text(size=12), axis.title=element_text(size=14))+ # Changes the font size of axes labels
theme(panel.grid.minor = element_blank()) # takes out the minor grid lines -- I did this because you don't have 0.5 timesteps
ggsave("Boater_Threshold_11212022.jpg", height=10, width=8)
library(ggplot2)
library(readxl)
library(tidyr) # This library is necessary for converting the dataframe from long to wide format (pivot_wider function)
setwd("C:/Users/RDEL1CMC/Desktop/Congressional_Ad_Projects/Dreissenid_Mussel_Model/Results/") # set to your working directory
dat <- read_excel("Test_Sensitivity_Results.xlsx")
dat <- dat[c(1,3:4)] # I dropped the "parameter" variable -- necessary to use pivot_wider
dat$RunNumber <- paste("Run",dat$RunNumber, sep="") # Converting from number type to string
# pivot_wider makes a column for each RunNumber
# This way you can select min/max for the geom_ribbon function
dat %>%
ggplot(aes(x = TimeStep)) +
#ylim(0,325) +
scale_x_continuous(limits = c(1,7), expand = c(0,0)) +
scale_y_continuous(limits = c(0,350), expand = c(0,0), breaks = seq(0, 350, 50)) +
geom_ribbon(
data = ~ pivot_wider(., names_from = RunNumber, values_from = infested),
aes(ymin = Run6, ymax = Run10), fill = "blue", alpha = 0.25
) +
geom_line(aes(y = infested,
linetype=RunNumber), # added line type back inside "aes"
color= "black", # added color outside "aes" so all would be black
lwd  = 0.5, )  +
scale_linetype_manual(name = "", values = c("dashed", "solid", "dotted")) +
ylab("Number of lakes infested") + xlab("Timestep") +
theme_bw() +
theme(legend.position = "none") +# this takes out the legend
theme(axis.text=element_text(size=12), axis.title=element_text(size=14))+ # Changes the font size of axes labels
theme(panel.grid.minor = element_blank()) # takes out the minor grid lines -- I did this because you don't have 0.5 timesteps
ggsave("Boater_Threshold_11212022.jpg", height=10, width=8)
library(ggplot2)
library(readxl)
library(tidyr) # This library is necessary for converting the dataframe from long to wide format (pivot_wider function)
setwd("C:/Users/RDEL1CMC/Desktop/Congressional_Ad_Projects/Dreissenid_Mussel_Model/Results/") # set to your working directory
dat <- read_excel("Test_Sensitivity_Results.xlsx")
dat <- dat[c(1,3:4)] # I dropped the "parameter" variable -- necessary to use pivot_wider
dat$RunNumber <- paste("Run",dat$RunNumber, sep="") # Converting from number type to string
# pivot_wider makes a column for each RunNumber
# This way you can select min/max for the geom_ribbon function
dat %>%
ggplot(aes(x = TimeStep)) +
#ylim(0,325) +
scale_x_continuous(limits = c(1,7), expand = c(0,0)) +
scale_y_continuous(limits = c(0,350), expand = c(0,0), breaks = seq(0, 350, 50)) +
geom_ribbon(
data = ~ pivot_wider(., names_from = RunNumber, values_from = infested),
aes(ymin = Run6, ymax = Run10), fill = "blue", alpha = 0.25
) +
geom_line(aes(y = infested,
linetype=RunNumber), # added line type back inside "aes"
color= "black", # added color outside "aes" so all would be black
lwd  = 0.5, )  +
scale_linetype_manual(name = "", values = c("dashed", "solid", "dotted")) +
ylab("Number of lakes infested") + xlab("Timestep") +
theme_bw() +
theme(legend.position = "none") +# this takes out the legend
theme(axis.text=element_text(size=12), axis.title=element_text(size=14))+ # Changes the font size of axes labels
theme(panel.grid.minor = element_blank()) # takes out the minor grid lines -- I did this because you don't have 0.5 timesteps
ggsave("Habitat_Suitability_11212022.jpg", height=10, width=8)
library(ggplot2)
library(readxl)
library(tidyr) # This library is necessary for converting the dataframe from long to wide format (pivot_wider function)
setwd("C:/Users/RDEL1CMC/Desktop/Congressional_Ad_Projects/Dreissenid_Mussel_Model/Results/") # set to your working directory
dat <- read_excel("Test_Sensitivity_Results.xlsx")
dat <- dat[c(1,3:4)] # I dropped the "parameter" variable -- necessary to use pivot_wider
dat$RunNumber <- paste("Run",dat$RunNumber, sep="") # Converting from number type to string
# pivot_wider makes a column for each RunNumber
# This way you can select min/max for the geom_ribbon function
dat %>%
ggplot(aes(x = TimeStep)) +
#ylim(0,325) +
scale_x_continuous(limits = c(1,7), expand = c(0,0)) +
scale_y_continuous(limits = c(0,350), expand = c(0,0), breaks = seq(0, 350, 50)) +
geom_ribbon(
data = ~ pivot_wider(., names_from = RunNumber, values_from = infested),
aes(ymin = Run5, ymax = Run1), fill = "blue", alpha = 0.25
) +
geom_line(aes(y = infested,
linetype=RunNumber), # added line type back inside "aes"
color= "black", # added color outside "aes" so all would be black
lwd  = 0.5, )  +
scale_linetype_manual(name = "", values = c("dashed", "solid", "dotted")) +
ylab("Number of lakes infested") + xlab("Timestep") +
theme_bw() +
theme(legend.position = "none") +# this takes out the legend
theme(axis.text=element_text(size=12), axis.title=element_text(size=14))+ # Changes the font size of axes labels
theme(panel.grid.minor = element_blank()) # takes out the minor grid lines -- I did this because you don't have 0.5 timesteps
ggsave("Boater_Threshold_11212022.jpg", height=10, width=8)
